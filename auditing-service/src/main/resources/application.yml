# application.yml para el Microservicio de Auditoria

# Configuracion del Servidor Web
server:
  port: 8085 # Un puerto fijo para este servicio (asegurate de que sea unico)

# Configuracion de la Aplicacion Spring
spring:
  application:
    name: auditing-service # Nombre del servicio para Eureka

  # Configuracion de la Base de Datos (JPA y DataSource)
  datasource:
    url: jdbc:postgresql://localhost:5434/audit_db_name # Conecta a la base de datos de auditoria en el puerto 5434 (el mapeado en docker-compose)
    username: audit_user # Usuario definido en docker-compose
    password: audit_password # Contrasena definida en docker-compose
    driver-class-name: org.postgresql.Driver # Driver de PostgreSQL

  jpa:
    hibernate:
      ddl-auto: update # JPA actualizara el esquema de la DB segun tus entidades (util para desarrollo)
      # ddl-auto: validate # Recomendado para produccion (verifica que el esquema de DB coincide con las entidades)
    show-sql: true # Muestra las consultas SQL en los logs (util para depuracion)
    properties:
      hibernate:
        format_sql: true # Formatea el SQL para mejor legibilidad
    database-platform: org.hibernate.dialect.PostgreSQLDialect # Dialecto de Hibernate para PostgreSQL


  cloud:
    function:
      # El nombre de la funcion consumidora que definimos en AuditConsumer.java
      definition: auditEventsListener
    stream:
      kafka:
        binder:
          brokers: localhost:9092 # <--- VERIFICA ESTA DIRECCION segun donde corras el servicio
      bindings:
        # Nombre del binding: Debe coincidir con 'definition' y terminar en '-in-0' para un consumidor de entrada.
        auditEventsListener-in-0:
          # El topico de Kafka del que el auditing-service ESCUCHARa los eventos de auditoria.
          destination: audit-events-topic # <--- Este debe coincidir con el topico al que el Auth Service envia!
          # Grupo de consumidores para el auditing-service. Debe ser unico.
          group: auditing-service-group

          consumer:
            # Puedes anadir propiedades del consumidor aqui si necesitas (ej. reintentos, DLQ)
            # max-attempts: 3
            # enable-dlq: true
            # dlq-name: audit-events-dlq

            configuration:
              # Indica el tipo esperado del payload. DEBE ser la clase AuditEvent del modulo shared-models.
              spring.json.value.default.type: org.redlectora.shared.audit.event.AuditEvent
              # Paquetes confiables para el deserializador JSON. DEBE incluir el paquete donde esta AuditEvent.
              trusted.packages: org.redlectora.shared.audit.event
              # Normalmente, si el productor pone el tipo en las cabeceras del mensaje, use.type.headers: true (por defecto) es correcto.
              # Si el productor NO pone las cabeceras, necesitas default.type y use.type.headers: false.
              use.type.headers: false # Mantener en true si el productor usa el serializador por defecto

# Configuracion de Eureka Client
eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/ # URL de tu Eureka Server (ajusta si no esta en localhost:8761)

# Propiedad personalizada para el nombre del topico de auditoria (usada por el productor si no usa bindings, o por referencia)
# No afecta directamente a este consumidor que usa el 'destination' del binding.
audit:
  kafka:
    topic: audit-events-topic

# Configuracion de Logging con niveles de depuracion
logging:
  level:
    # ... otras configuraciones de logging ...
    org.springframework.kafka: DEBUG # Logs detallados del cliente Kafka de Spring
    org.springframework.cloud.stream: DEBUG # Logs detallados de Spring Cloud Stream
    org.springframework.messaging: DEBUG # Puede mostrar logs de conversión de mensajes
    org.redlectora: DEBUG # Mantén este para tus System.out o logs personalizados